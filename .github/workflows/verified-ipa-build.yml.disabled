name: Verified IPA Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Build Environment
      run: |
        # Create all required directories
        mkdir -p FlirtFrame
        mkdir -p FlirtFrame/Assets.xcassets/AppIcon.appiconset
        
        # Copy Swift files
        cp -r Sources/* FlirtFrame/ || echo "Failed to copy sources"
        
        # Create a valid Info.plist
        cat > FlirtFrame/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleDevelopmentRegion</key>
          <string>en</string>
          <key>CFBundleDisplayName</key>
          <string>FlirtFrame</string>
          <key>CFBundleExecutable</key>
          <string>FlirtFrame</string>
          <key>CFBundleIdentifier</key>
          <string>com.flirtframe.app</string>
          <key>CFBundleInfoDictionaryVersion</key>
          <string>6.0</string>
          <key>CFBundleName</key>
          <string>FlirtFrame</string>
          <key>CFBundlePackageType</key>
          <string>APPL</string>
          <key>CFBundleShortVersionString</key>
          <string>1.0</string>
          <key>CFBundleVersion</key>
          <string>1</string>
          <key>LSRequiresIPhoneOS</key>
          <true/>
          <key>UILaunchStoryboardName</key>
          <string>LaunchScreen</string>
          <key>UIRequiredDeviceCapabilities</key>
          <array>
            <string>arm64</string>
          </array>
          <key>UISupportedInterfaceOrientations</key>
          <array>
            <string>UIInterfaceOrientationPortrait</string>
          </array>
          <key>UIApplicationSceneManifest</key>
          <dict>
            <key>UIApplicationSupportsMultipleScenes</key>
            <false/>
          </dict>
        </dict>
        </plist>
        EOF
        
    - name: Create Xcode Project
      run: |
        # Create project.pbxproj from scratch
        cat > project.yml << 'EOF'
        name: FlirtFrame
        options:
          bundleIdPrefix: com.flirtframe
          createIntermediateGroups: true
          deploymentTarget:
            iOS: "16.0"
        settings:
          base:
            PRODUCT_NAME: FlirtFrame
            PRODUCT_BUNDLE_IDENTIFIER: com.flirtframe.app
            INFOPLIST_FILE: FlirtFrame/Info.plist
            CODE_SIGN_IDENTITY: ""
            CODE_SIGNING_REQUIRED: "NO"
            CODE_SIGNING_ALLOWED: "NO"
            CODE_SIGN_ENTITLEMENTS: ""
            DEVELOPMENT_TEAM: ""
            PROVISIONING_PROFILE_SPECIFIER: ""
            TARGETED_DEVICE_FAMILY: "1,2"
            SWIFT_VERSION: "5.0"
            IPHONEOS_DEPLOYMENT_TARGET: "16.0"
            MARKETING_VERSION: "1.0"
            CURRENT_PROJECT_VERSION: "1"
        targets:
          FlirtFrame:
            type: application
            platform: iOS
            sources:
              - path: FlirtFrame/SimpleApp.swift
              - path: Assets.xcassets
            settings:
              base:
                PRODUCT_BUNDLE_IDENTIFIER: com.flirtframe.app
                INFOPLIST_FILE: FlirtFrame/Info.plist
        EOF
        
        # Install and run XcodeGen
        brew install xcodegen || true
        xcodegen generate
        
        # Verify project was created
        ls -la FlirtFrame.xcodeproj || exit 1
        
    - name: Build App
      run: |
        set -e
        
        # Clean any previous builds
        rm -rf build DerivedData
        
        # Build the app
        xcodebuild build \
          -project FlirtFrame.xcodeproj \
          -scheme FlirtFrame \
          -configuration Release \
          -destination "generic/platform=iOS" \
          -derivedDataPath DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          ONLY_ACTIVE_ARCH=NO \
          EXCLUDED_ARCHS="" | xcpretty || true
          
        # Find the built app
        APP_PATH=$(find DerivedData -name "*.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "ERROR: No .app bundle found!"
          find DerivedData -type d -name "*" | head -20
          exit 1
        fi
        
        echo "Found app at: $APP_PATH"
        ls -la "$APP_PATH"
        
        # Create IPA
        mkdir -p Payload
        cp -R "$APP_PATH" Payload/
        zip -r FlirtFrame.ipa Payload
        
        # Verify IPA size
        SIZE=$(stat -f%z FlirtFrame.ipa 2>/dev/null || stat -c%s FlirtFrame.ipa)
        echo "IPA size: $SIZE bytes"
        
        if [ "$SIZE" -lt 100000 ]; then
          echo "ERROR: IPA is too small (${SIZE} bytes), build likely failed"
          unzip -l FlirtFrame.ipa
          exit 1
        fi
        
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: FlirtFrame-iOS-App
        path: FlirtFrame.ipa
        if-no-files-found: error
        
    - name: Upload Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          DerivedData/Logs
          *.log