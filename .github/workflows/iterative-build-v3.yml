name: Iterative Build v3 - Add AI Openers

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Build Step 3 - Add AI Opener Generation
      run: |
        echo "ðŸŽ¯ Step 3: Adding AI opener generation (mock for now)..."
        
        # Clean workspace
        rm -rf FlirtFrame.xcodeproj DerivedData Payload *.ipa
        rm -rf BuildSourceV3
        
        # Create isolated source directory
        mkdir -p BuildSourceV3
        
        # Create PhotoAnalyzer mock
        cat > BuildSourceV3/PhotoAnalyzer.swift << 'EOF'
        import UIKit
        
        struct PhotoAnalysis {
            let hasPersons: Bool
            let mood: String
            let scene: String
            let objects: [String]
        }
        
        class PhotoAnalyzer {
            static func analyze(_ image: UIImage) -> PhotoAnalysis {
                // Mock analysis for now
                return PhotoAnalysis(
                    hasPersons: true,
                    mood: "Happy",
                    scene: "Outdoor",
                    objects: ["Sunglasses", "Beach", "Smile"]
                )
            }
        }
        EOF
        
        # Create OpenerEngine mock
        cat > BuildSourceV3/OpenerEngine.swift << 'EOF'
        import Foundation
        
        struct Opener {
            let text: String
            let style: String
        }
        
        class OpenerEngine {
            static func generateOpeners(from analysis: PhotoAnalysis) -> [Opener] {
                // Mock openers based on analysis
                var openers: [Opener] = []
                
                if analysis.scene == "Outdoor" {
                    openers.append(Opener(text: "That outdoor shot is amazing! Where was this taken?", style: "Casual"))
                    openers.append(Opener(text: "Love the adventurous vibe in your photo!", style: "Enthusiastic"))
                }
                
                if analysis.objects.contains("Beach") {
                    openers.append(Opener(text: "Beach person too? What's your favorite spot?", style: "Conversational"))
                }
                
                // Default openers
                openers.append(Opener(text: "Your photo really caught my eye! What's the story behind it?", style: "Curious"))
                openers.append(Opener(text: "Great energy in this pic! ðŸ˜Š", style: "Friendly"))
                
                return openers
            }
        }
        EOF
        
        # Main app with all features
        cat > BuildSourceV3/FlirtFrameApp.swift << 'EOF'
        import SwiftUI
        import PhotosUI
        
        @main
        struct FlirtFrameApp: App {
            var body: some Scene {
                WindowGroup {
                    ContentView()
                }
            }
        }
        
        struct ContentView: View {
            @State private var selectedItem: PhotosPickerItem?
            @State private var selectedImage: UIImage?
            @State private var openers: [Opener] = []
            @State private var isAnalyzing = false
            
            var body: some View {
                NavigationView {
                    ScrollView {
                        VStack(spacing: 20) {
                            // Photo Display
                            if let image = selectedImage {
                                Image(uiImage: image)
                                    .resizable()
                                    .scaledToFit()
                                    .frame(maxHeight: 300)
                                    .cornerRadius(15)
                                    .shadow(radius: 5)
                            } else {
                                RoundedRectangle(cornerRadius: 15)
                                    .fill(Color.gray.opacity(0.2))
                                    .frame(height: 300)
                                    .overlay(
                                        VStack {
                                            Image(systemName: "photo")
                                                .font(.system(size: 50))
                                                .foregroundColor(.gray)
                                            Text("Select a photo")
                                                .foregroundColor(.gray)
                                        }
                                    )
                            }
                            
                            // Photo Picker Button
                            PhotosPicker(
                                selection: $selectedItem,
                                matching: .images,
                                photoLibrary: .shared()
                            ) {
                                Label("Choose Photo", systemImage: "photo.fill")
                                    .font(.title3)
                                    .padding()
                                    .frame(maxWidth: .infinity)
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                            }
                            .onChange(of: selectedItem) { newItem in
                                Task {
                                    if let data = try? await newItem?.loadTransferable(type: Data.self),
                                       let image = UIImage(data: data) {
                                        selectedImage = image
                                        analyzePhoto(image)
                                    }
                                }
                            }
                            
                            // Loading indicator
                            if isAnalyzing {
                                ProgressView("Analyzing photo...")
                                    .padding()
                            }
                            
                            // Openers List
                            if !openers.isEmpty {
                                VStack(alignment: .leading, spacing: 15) {
                                    Text("Suggested Openers")
                                        .font(.headline)
                                        .padding(.horizontal)
                                    
                                    ForEach(openers.indices, id: \.self) { index in
                                        OpenerCard(opener: openers[index])
                                    }
                                }
                                .padding(.top)
                            }
                        }
                        .padding()
                    }
                    .navigationTitle("FlirtFrame")
                    .navigationBarTitleDisplayMode(.large)
                }
            }
            
            func analyzePhoto(_ image: UIImage) {
                isAnalyzing = true
                openers = []
                
                // Simulate analysis delay
                DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
                    let analysis = PhotoAnalyzer.analyze(image)
                    openers = OpenerEngine.generateOpeners(from: analysis)
                    isAnalyzing = false
                }
            }
        }
        
        struct OpenerCard: View {
            let opener: Opener
            @State private var isCopied = false
            
            var body: some View {
                HStack {
                    VStack(alignment: .leading, spacing: 5) {
                        Text(opener.text)
                            .font(.body)
                        Text(opener.style)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    Spacer()
                    
                    Button(action: {
                        UIPasteboard.general.string = opener.text
                        isCopied = true
                        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                            isCopied = false
                        }
                    }) {
                        Image(systemName: isCopied ? "checkmark" : "doc.on.doc")
                            .foregroundColor(isCopied ? .green : .blue)
                    }
                }
                .padding()
                .background(Color.gray.opacity(0.1))
                .cornerRadius(10)
                .padding(.horizontal)
            }
        }
        EOF
        
        # Info.plist remains the same
        cp Info.plist Info.plist.backup || true
        
        # Project configuration
        cat > project.yml << 'EOF'
        name: FlirtFrame
        options:
          bundleIdPrefix: com.flirtframe
          createIntermediateGroups: true
          deploymentTarget:
            iOS: 16.0
        settings:
          base:
            PRODUCT_NAME: FlirtFrame
            PRODUCT_BUNDLE_IDENTIFIER: com.flirtframe.app
            MARKETING_VERSION: 1.0
            CURRENT_PROJECT_VERSION: 3
            DEVELOPMENT_TEAM: ""
            CODE_SIGN_STYLE: Manual
            CODE_SIGN_IDENTITY: ""
            CODE_SIGNING_REQUIRED: "NO"
            CODE_SIGNING_ALLOWED: "NO"
            PROVISIONING_PROFILE_SPECIFIER: ""
            INFOPLIST_FILE: Info.plist
            IPHONEOS_DEPLOYMENT_TARGET: 16.0
            SWIFT_VERSION: 5.0
            TARGETED_DEVICE_FAMILY: 1,2
        targets:
          FlirtFrame:
            type: application
            platform: iOS
            deploymentTarget: 16.0
            sources:
              - path: BuildSourceV3
                excludes:
                  - "**/*.md"
            settings:
              base:
                INFOPLIST_FILE: Info.plist
                PRODUCT_BUNDLE_IDENTIFIER: com.flirtframe.app
        EOF
        
        echo "âœ… Created app with AI opener generation"
        
    - name: Generate and Build
      run: |
        brew install xcodegen || brew upgrade xcodegen || true
        xcodegen generate --spec project.yml
        
        xcodebuild build \
          -project FlirtFrame.xcodeproj \
          -scheme FlirtFrame \
          -configuration Release \
          -sdk iphoneos \
          -destination "generic/platform=iOS" \
          -derivedDataPath "$PWD/DerivedData" \
          ONLY_ACTIVE_ARCH=NO \
          ARCHS="arm64" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Create IPA
      run: |
        APP_PATH=$(find DerivedData -name "*.app" -type d | grep -E "Release-iphoneos" | head -1)
        mkdir -p Payload
        cp -R "$APP_PATH" Payload/
        zip -qr FlirtFrame-v3.ipa Payload
        
        echo "âœ… Full FlirtFrame app built successfully!"
        ls -lh FlirtFrame-v3.ipa
        
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: FlirtFrame-v3-AI-Openers
        path: FlirtFrame-v3.ipa
        if-no-files-found: error