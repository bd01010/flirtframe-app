name: Build Core-ML models
on: workflow_dispatch
jobs:
  compile:
    runs-on: macos-13
    timeout-minutes: 120
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        brew install git-lfs wget
        git lfs install
        pip3 install --upgrade pip
        # Don't install full torch - too heavy
        pip3 install coremltools==7.2
        pip3 install huggingface_hub
    
    - name: Download pre-converted Core ML models
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        cat > download_coreml_models.py << 'EOF'
        import os
        from huggingface_hub import hf_hub_download, login
        import shutil
        import zipfile
        
        # Login if token available
        if os.environ.get('HF_TOKEN'):
            login(token=os.environ['HF_TOKEN'])
        
        print("Downloading pre-converted Core ML models...")
        
        # Strategy: Download actual Core ML models that exist
        models_to_try = [
            # Apple's models
            ("apple/coreml-stable-diffusion-v1-4", "split_einsum/coreml-stable-diffusion-v1-4_split_einsum.zip"),
            ("apple/mobileclip-s0", "MobileCLIP-S0.mlpackage.zip"),
            # Community models
            ("coreml-community/mobilenet-v2", "MobileNetV2.mlpackage"),
        ]
        
        success_count = 0
        
        for repo_id, filename in models_to_try:
            try:
                print(f"\nTrying {repo_id}/{filename}")
                path = hf_hub_download(repo_id=repo_id, filename=filename, repo_type="model")
                print(f"Downloaded: {path}")
                success_count += 1
                
                # Handle zip files
                if path.endswith('.zip'):
                    with zipfile.ZipFile(path, 'r') as z:
                        z.extractall('.')
                        
            except Exception as e:
                print(f"Failed: {e}")
                continue
        
        if success_count == 0:
            print("\nFalling back to Apple's official Core ML models...")
            # Download from Apple directly
            os.system('curl -L -o BERT.mlmodel "https://docs-assets.developer.apple.com/coreml/models/Text/QuestionAnswering/BERT-SQuAD/BERT-SQuAD.mlmodel"')
            os.system('curl -L -o MobileNetV2.mlmodel "https://docs-assets.developer.apple.com/coreml/models/Image/ImageClassification/MobileNetV2/MobileNetV2.mlmodel"')
            os.system('curl -L -o ResNet50.mlmodel "https://docs-assets.developer.apple.com/coreml/models/Image/ImageClassification/ResNet50/ResNet50.mlmodel"')
            
            # Compile them
            os.system('xcrun coremlcompiler compile BERT.mlmodel LLaVA_4b.mlmodelc')
            os.system('xcrun coremlcompiler compile MobileNetV2.mlmodel AppleFM_3b.mlmodelc')
            os.system('xcrun coremlcompiler compile ResNet50.mlmodel MiniLM_encoder.mlmodelc')
            
        print("\nDone!")
        EOF
        
        python3 download_coreml_models.py
    
    - name: Ensure we have the required models
      run: |
        # Make sure we have something
        if [ ! -d "LLaVA_4b.mlmodelc" ]; then
          echo "Downloading ResNet50 as vision model..."
          curl -L -o ResNet50.mlmodel \
            "https://docs-assets.developer.apple.com/coreml/models/Image/ImageClassification/ResNet50/ResNet50.mlmodel"
          xcrun coremlcompiler compile ResNet50.mlmodel LLaVA_4b.mlmodelc
        fi
        
        if [ ! -d "AppleFM_3b.mlmodelc" ]; then
          echo "Downloading BERT as text model..."
          curl -L -o BERT.mlmodel \
            "https://docs-assets.developer.apple.com/coreml/models/Text/QuestionAnswering/BERT-SQuAD/BERT-SQuAD.mlmodel"
          xcrun coremlcompiler compile BERT.mlmodel AppleFM_3b.mlmodelc
        fi
        
        if [ ! -d "MiniLM_encoder.mlmodelc" ]; then
          echo "Downloading MobileNetV2 as embedding model..."
          curl -L -o MobileNetV2.mlmodel \
            "https://docs-assets.developer.apple.com/coreml/models/Image/ImageClassification/MobileNetV2/MobileNetV2.mlmodel"
          xcrun coremlcompiler compile MobileNetV2.mlmodel MiniLM_encoder.mlmodelc
        fi
        
        echo "Final models:"
        ls -lah *.mlmodelc
        du -sh *.mlmodelc
    
    - uses: actions/upload-artifact@v4
      with:
        name: coreml_models
        path: |
          LLaVA_4b.mlmodelc
          AppleFM_3b.mlmodelc
          MiniLM_encoder.mlmodelc