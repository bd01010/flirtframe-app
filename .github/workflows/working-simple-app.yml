name: Working Simple App

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Create Simple iOS App
      run: |
        mkdir -p SimpleApp
        
        cat > SimpleApp/App.swift << 'EOF'
        import SwiftUI
        import PhotosUI

        @main
        struct FlirtFrameApp: App {
            var body: some Scene {
                WindowGroup {
                    ContentView()
                }
            }
        }

        struct ContentView: View {
            @State private var selectedItem: PhotosPickerItem?
            @State private var selectedImage: Image?
            @State private var openers = [String]()
            @State private var isAnalyzing = false
            
            var body: some View {
                VStack(spacing: 20) {
                    Text("FlirtFrame")
                        .font(.largeTitle)
                        .bold()
                    
                    if let image = selectedImage {
                        image
                            .resizable()
                            .scaledToFit()
                            .frame(maxHeight: 300)
                            .cornerRadius(10)
                    }
                    
                    PhotosPicker("Select Photo", selection: $selectedItem, matching: .images)
                        .buttonStyle(.borderedProminent)
                        .controlSize(.large)
                    
                    if isAnalyzing {
                        ProgressView("Analyzing...")
                    }
                    
                    ForEach(openers, id: \.self) { opener in
                        Text(opener)
                            .padding()
                            .background(Color.blue.opacity(0.1))
                            .cornerRadius(8)
                    }
                    
                    Spacer()
                }
                .padding()
                .onChange(of: selectedItem) { newItem in
                    Task {
                        if let data = try? await newItem?.loadTransferable(type: Data.self) {
                            if let uiImage = UIImage(data: data) {
                                selectedImage = Image(uiImage: uiImage)
                                analyzePhoto()
                            }
                        }
                    }
                }
            }
            
            func analyzePhoto() {
                isAnalyzing = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                    openers = [
                        "Great photo! What's the story behind it?",
                        "Your style really caught my eye!",
                        "This photo has such a unique vibe!"
                    ]
                    isAnalyzing = false
                }
            }
        }
        EOF
        
        cat > SimpleApp/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>FlirtFrame</string>
            <key>CFBundleIdentifier</key>
            <string>com.flirtframe.app</string>
            <key>CFBundleName</key>
            <string>FlirtFrame</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSRequiresIPhoneOS</key>
            <true/>
            <key>UILaunchStoryboardName</key>
            <string>LaunchScreen</string>
            <key>UISupportedInterfaceOrientations</key>
            <array>
                <string>UIInterfaceOrientationPortrait</string>
            </array>
            <key>NSPhotoLibraryUsageDescription</key>
            <string>Select photos to generate conversation starters</string>
        </dict>
        </plist>
        EOF
        
        cat > project.yml << 'EOF'
        name: FlirtFrame
        options:
          bundleIdPrefix: com.flirtframe
          deploymentTarget:
            iOS: 16.0
        settings:
          base:
            PRODUCT_BUNDLE_IDENTIFIER: com.flirtframe.app
            CODE_SIGN_IDENTITY: ""
            CODE_SIGNING_REQUIRED: "NO"
            CODE_SIGNING_ALLOWED: "NO"
            INFOPLIST_FILE: SimpleApp/Info.plist
        targets:
          FlirtFrame:
            type: application
            platform: iOS
            sources: 
              - SimpleApp/App.swift
        EOF
        
    - name: Build App
      run: |
        brew install xcodegen || true
        xcodegen
        
        # Build for real device
        xcodebuild -project FlirtFrame.xcodeproj \
          -scheme FlirtFrame \
          -configuration Release \
          -sdk iphoneos \
          -destination "generic/platform=iOS" \
          -derivedDataPath DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
          
    - name: Create IPA
      run: |
        # Find the app
        APP_PATH=$(find DerivedData -name "*.app" -type d | head -1)
        echo "Found app at: $APP_PATH"
        
        if [ -z "$APP_PATH" ]; then
          echo "ERROR: No app found!"
          exit 1
        fi
        
        # Create Payload directory
        mkdir -p Payload
        cp -R "$APP_PATH" Payload/
        
        # Check if SwiftSupport exists
        SWIFT_SUPPORT=$(find DerivedData -name "SwiftSupport" -type d | head -1)
        if [ -n "$SWIFT_SUPPORT" ]; then
          echo "Found SwiftSupport at: $SWIFT_SUPPORT"
          cp -R "$SWIFT_SUPPORT" .
        fi
        
        # Create IPA
        zip -qr FlirtFrame.ipa Payload SwiftSupport 2>/dev/null || zip -qr FlirtFrame.ipa Payload
        
        # Verify IPA
        echo "IPA created:"
        ls -lh FlirtFrame.ipa
        
        # Show contents
        echo ""
        echo "IPA contents:"
        unzip -l FlirtFrame.ipa | head -20
        
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: FlirtFrame-Working-IPA
        path: FlirtFrame.ipa
        if-no-files-found: error