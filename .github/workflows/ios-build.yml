name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Create simple Xcode project
      run: |
        # Create a basic iOS app project structure
        mkdir -p FlirtFrameApp
        
        # Create main app file
        cat > FlirtFrameApp/main.swift << 'EOF'
        import UIKit
        
        UIApplicationMain(
            CommandLine.argc,
            CommandLine.unsafeArgv,
            nil,
            NSStringFromClass(AppDelegate.self)
        )
        EOF
        
        # Copy source files
        cp -r Sources/* FlirtFrameApp/
        
        # Create module map
        cat > FlirtFrameApp/module.modulemap << 'EOF'
        module FlirtFrame {
            header "FlirtFrame-Bridging-Header.h"
            export *
        }
        EOF
        
        # Create bridging header
        touch FlirtFrameApp/FlirtFrame-Bridging-Header.h
        
        # Create simple xcodeproj using Swift
        cat > create_project.swift << 'EOF'
        import Foundation
        
        let fileManager = FileManager.default
        let currentPath = fileManager.currentDirectoryPath
        
        // Create build script
        let buildScript = """
        #!/bin/bash
        
        # Compile all Swift files
        swiftc -target x86_64-apple-ios16.0-simulator \\
          -sdk $(xcrun --sdk iphonesimulator --show-sdk-path) \\
          -emit-executable \\
          -o FlirtFrame \\
          FlirtFrameApp/*.swift \\
          -import-objc-header FlirtFrameApp/FlirtFrame-Bridging-Header.h \\
          -emit-module -emit-module-path . \\
          -parse-as-library
        """
        
        try buildScript.write(toFile: "build.sh", atomically: true, encoding: .utf8)
        
        // Make it executable
        let task = Process()
        task.launchPath = "/bin/chmod"
        task.arguments = ["+x", "build.sh"]
        task.launch()
        task.waitUntilExit()
        
        print("Build script created")
        EOF
        
        swift create_project.swift
        
    - name: Build app
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Use xcodebuild with generic iOS project
        xcodebuild -create-xcframework \
          -framework FlirtFrameApp \
          -output FlirtFrame.xcframework || true
          
        # If that fails, compile directly
        if [ ! -d "FlirtFrame.xcframework" ]; then
          echo "Using direct compilation..."
          chmod +x build.sh
          ./build.sh
        fi
        
    - name: Create build artifact
      run: |
        mkdir -p build
        zip -r build/FlirtFrame.zip FlirtFrameApp/ *.swift
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: FlirtFrame-Build
        path: build/FlirtFrame.zip