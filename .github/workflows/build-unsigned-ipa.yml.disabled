name: Build Unsigned IPA

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Unsigned IPA for Sideloading
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode.app
        
    - name: Create Required Files
      run: |
        # Create Config.xcconfig
        echo 'OPENAI_API_KEY = test' > Config.xcconfig
        
        # Create GoogleService-Info.plist
        cat > GoogleService-Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>API_KEY</key>
          <string>AIzaSyBjOftE_ZAb2ijCkW7y1EMQs6vm9PTPJRPw</string>
          <key>GCM_SENDER_ID</key>
          <string>9614217320</string>
          <key>PLIST_VERSION</key>
          <string>1</string>
          <key>BUNDLE_ID</key>
          <string>com.flirtframe.app</string>
          <key>PROJECT_ID</key>
          <string>j111-c1573</string>
          <key>STORAGE_BUCKET</key>
          <string>j111-c1573.firebasestorage.app</string>
          <key>IS_ADS_ENABLED</key>
          <false/>
          <key>IS_ANALYTICS_ENABLED</key>
          <false/>
          <key>IS_APPINVITE_ENABLED</key>
          <true/>
          <key>IS_GCM_ENABLED</key>
          <true/>
          <key>IS_SIGNIN_ENABLED</key>
          <true/>
          <key>GOOGLE_APP_ID</key>
          <string>1:9614217320:ios:06b78a86ab737224deabdd</string>
        </dict>
        </plist>
        EOF
        
    - name: Resolve Dependencies
      run: |
        echo "Skipping dependency resolution for now..."
        
    - name: Build Archive
      run: |
        set -e
        
        # Clean build folder
        rm -rf build
        
        # List available schemes
        echo "Available schemes:"
        xcodebuild -list -project FlirtFrame.xcodeproj || echo "Failed to list schemes"
        
        # Build the archive without code signing
        xcodebuild archive \
          -project FlirtFrame.xcodeproj \
          -scheme FlirtFrame \
          -configuration Release \
          -destination "generic/platform=iOS" \
          -archivePath $PWD/build/FlirtFrame.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          clean archive || (echo "Build failed with error code $?"; exit 1)
          
    - name: Check Archive Contents
      run: |
        echo "Archive contents:"
        ls -la build/FlirtFrame.xcarchive/
        echo ""
        echo "Products contents:"
        ls -la build/FlirtFrame.xcarchive/Products/ || echo "No Products directory"
        echo ""
        echo "Applications contents:"
        ls -la build/FlirtFrame.xcarchive/Products/Applications/ || echo "No Applications directory"
        
    - name: Create IPA
      run: |
        # Create Payload directory
        mkdir -p output/Payload
        
        # Find and copy the .app bundle
        APP_PATH=$(find build/FlirtFrame.xcarchive -name "*.app" -type d | head -1)
        
        if [ -z "$APP_PATH" ]; then
          echo "ERROR: No .app bundle found in archive"
          exit 1
        fi
        
        echo "Found app at: $APP_PATH"
        cp -r "$APP_PATH" output/Payload/
        
        # Copy SwiftSupport if it exists
        if [ -d "build/FlirtFrame.xcarchive/SwiftSupport" ]; then
          echo "Copying SwiftSupport..."
          cp -r build/FlirtFrame.xcarchive/SwiftSupport output/
        fi
        
        # Create the IPA
        cd output
        zip -qr ../FlirtFrame.ipa .
        cd ..
        
        # Verify IPA was created
        echo "IPA created:"
        ls -la FlirtFrame.ipa
        
    - name: Create Installation Guide
      run: |
        cat > INSTALL_GUIDE.md << 'EOF'
        # Installing FlirtFrame on Your iPhone
        
        ## Option 1: Sideloadly (Recommended for Windows)
        
        1. Download Sideloadly from: https://sideloadly.io
        2. Install and run Sideloadly on your PC
        3. Connect your iPhone via USB
        4. Download the FlirtFrame.ipa from this build's artifacts
        5. In Sideloadly:
           - Drag FlirtFrame.ipa into the window
           - Enter your Apple ID (any Apple ID works)
           - Click "Start"
        6. On your iPhone after installation:
           - Go to Settings → General → Device Management
           - Find your Apple ID under "Developer App"
           - Tap it and tap "Trust"
        
        ## Option 2: AltStore
        
        1. Install AltServer on your PC from: https://altstore.io
        2. Install AltStore on your iPhone
        3. Open FlirtFrame.ipa with AltStore
        
        ## Option 3: TrollStore (if compatible)
        
        Check if your iOS version is compatible at: https://ios.cfw.guide/installing-trollstore/
        
        ## Notes
        
        - With a free Apple ID, the app will expire after 7 days
        - You'll need to reinstall it using the same process
        - All Firebase features are included and will work!
        EOF
        
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: FlirtFrame-Unsigned-IPA
        path: |
          FlirtFrame.ipa
          INSTALL_GUIDE.md
        if-no-files-found: error