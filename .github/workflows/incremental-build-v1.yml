name: Incremental Build v1 - Core Features

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Build Structure
      run: |
        # Create organized structure
        mkdir -p FlirtFrameApp/Sources
        mkdir -p FlirtFrameApp/Resources
        
        # Copy existing source files (excluding Firebase for now)
        cp Sources/Models.swift FlirtFrameApp/Sources/ || echo "Models.swift not found"
        cp Sources/PhotoAnalyzer.swift FlirtFrameApp/Sources/ || echo "PhotoAnalyzer.swift not found"
        cp Sources/OpenerEngine.swift FlirtFrameApp/Sources/ || echo "OpenerEngine.swift not found"
        cp Sources/Configuration.swift FlirtFrameApp/Sources/ || echo "Configuration.swift not found"
        cp Sources/SafetyFilter.swift FlirtFrameApp/Sources/ || echo "SafetyFilter.swift not found"
        cp Sources/PromptBuilder.swift FlirtFrameApp/Sources/ || echo "PromptBuilder.swift not found"
        
        # Create a modified App file that uses real components
        cat > FlirtFrameApp/Sources/App.swift << 'EOF'
        import SwiftUI

        @main
        struct FlirtFrameApp: App {
            @StateObject private var appState = AppState()
            
            var body: some Scene {
                WindowGroup {
                    ContentView()
                        .environmentObject(appState)
                }
            }
        }

        // Simplified AppState without Firebase
        class AppState: ObservableObject {
            @Published var isOnboarded = true  // Skip onboarding for now
            @Published var currentUser: User?
            @Published var generatedOpeners: [GeneratedOpener] = []
            
            init() {
                // Initialize without Firebase
            }
        }
        EOF
        
        # Create main ContentView using real components
        cat > FlirtFrameApp/Sources/ContentView.swift << 'EOF'
        import SwiftUI
        import PhotosUI

        struct ContentView: View {
            @EnvironmentObject var appState: AppState
            @State private var selectedImage: UIImage?
            @State private var photoItem: PhotosPickerItem?
            @State private var isAnalyzing = false
            @State private var analysisResult: PhotoAnalysis?
            @State private var generatedOpeners: [String] = []
            @State private var errorMessage: String?
            
            private let photoAnalyzer = PhotoAnalyzer()
            private let openerEngine = OpenerEngine()
            
            var body: some View {
                NavigationView {
                    VStack(spacing: 20) {
                        Text("FlirtFrame")
                            .font(.largeTitle)
                            .fontWeight(.bold)
                        
                        if let image = selectedImage {
                            Image(uiImage: image)
                                .resizable()
                                .scaledToFit()
                                .frame(maxHeight: 300)
                                .cornerRadius(12)
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(Color.blue, lineWidth: 2)
                                )
                        } else {
                            RoundedRectangle(cornerRadius: 12)
                                .fill(Color.gray.opacity(0.2))
                                .frame(height: 300)
                                .overlay(
                                    VStack {
                                        Image(systemName: "photo")
                                            .font(.system(size: 60))
                                            .foregroundColor(.gray)
                                        Text("Select a photo")
                                            .foregroundColor(.gray)
                                    }
                                )
                        }
                        
                        PhotosPicker(selection: $photoItem,
                                   matching: .images,
                                   photoLibrary: .shared()) {
                            Label("Choose Photo", systemImage: "photo.fill")
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(Color.blue)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                        .onChange(of: photoItem) { newItem in
                            Task {
                                if let data = try? await newItem?.loadTransferable(type: Data.self),
                                   let image = UIImage(data: data) {
                                    selectedImage = image
                                    await analyzePhoto(image)
                                }
                            }
                        }
                        
                        if isAnalyzing {
                            ProgressView("Analyzing photo...")
                                .padding()
                        }
                        
                        if let error = errorMessage {
                            Text(error)
                                .foregroundColor(.red)
                                .font(.caption)
                        }
                        
                        if !generatedOpeners.isEmpty {
                            VStack(alignment: .leading, spacing: 10) {
                                Text("Generated Openers:")
                                    .font(.headline)
                                
                                ForEach(generatedOpeners, id: \.self) { opener in
                                    HStack(alignment: .top) {
                                        Text("â€¢")
                                        Text(opener)
                                            .fixedSize(horizontal: false, vertical: true)
                                    }
                                    .padding(.vertical, 5)
                                }
                            }
                            .padding()
                            .background(Color.blue.opacity(0.1))
                            .cornerRadius(10)
                        }
                        
                        Spacer()
                    }
                    .padding()
                    .navigationBarHidden(true)
                }
            }
            
            private func analyzePhoto(_ image: UIImage) async {
                isAnalyzing = true
                errorMessage = nil
                
                do {
                    // Use real PhotoAnalyzer
                    let analysis = try await photoAnalyzer.analyzeImage(image)
                    self.analysisResult = analysis
                    
                    // For now, generate mock openers based on analysis
                    await generateOpeners(for: analysis)
                } catch {
                    errorMessage = "Failed to analyze photo: \(error.localizedDescription)"
                }
                
                isAnalyzing = false
            }
            
            private func generateOpeners(for analysis: PhotoAnalysis) async {
                // Mock implementation since we don't have OpenAI key in CI
                var mockOpeners: [String] = []
                
                if analysis.hasPeople {
                    mockOpeners.append("I love your style! Where was this photo taken?")
                }
                
                if !analysis.objects.isEmpty {
                    let object = analysis.objects.first ?? "photo"
                    mockOpeners.append("That \(object) in your photo caught my eye! What's the story behind it?")
                }
                
                if !analysis.scenes.isEmpty {
                    mockOpeners.append("This \(analysis.scenes.first ?? "scene") looks amazing! Are you into photography?")
                }
                
                if mockOpeners.isEmpty {
                    mockOpeners = [
                        "Your photo has such a unique vibe! Tell me more about it.",
                        "This caught my attention! What inspired this shot?",
                        "I'm intrigued by your photo! Where was this taken?"
                    ]
                }
                
                self.generatedOpeners = mockOpeners
            }
        }
        EOF
        
        # Create simplified Models without Core Data
        cat > FlirtFrameApp/Sources/SimplifiedModels.swift << 'EOF'
        import Foundation
        import UIKit

        // User model
        struct User: Codable {
            let id: String
            let email: String?
            var isPremium: Bool = false
        }

        // Generated opener model
        struct GeneratedOpener: Identifiable, Codable {
            let id = UUID()
            let text: String
            let photoId: String
            let timestamp: Date
            var isFavorite: Bool = false
        }

        // Photo analysis result
        struct PhotoAnalysis {
            let id = UUID()
            let hasPeople: Bool
            let peopleCount: Int
            let objects: [String]
            let scenes: [String]
            let dominantColors: [String]
            let textFound: [String]
            let emotions: [String]
            let activities: [String]
            
            var isEmpty: Bool {
                return !hasPeople && objects.isEmpty && scenes.isEmpty
            }
            
            var summary: String {
                var parts: [String] = []
                
                if hasPeople {
                    parts.append("\(peopleCount) \(peopleCount == 1 ? "person" : "people")")
                }
                
                if !objects.isEmpty {
                    parts.append("Objects: \(objects.joined(separator: ", "))")
                }
                
                if !scenes.isEmpty {
                    parts.append("Scene: \(scenes.joined(separator: ", "))")
                }
                
                return parts.joined(separator: " â€¢ ")
            }
        }
        EOF
        
        # Copy assets
        if [ -d "Assets.xcassets" ]; then
            cp -r Assets.xcassets FlirtFrameApp/
        fi
        
        # Create Info.plist
        cp Info.plist FlirtFrameApp/Info.plist || cat > FlirtFrameApp/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDevelopmentRegion</key>
            <string>en</string>
            <key>CFBundleExecutable</key>
            <string>$(EXECUTABLE_NAME)</string>
            <key>CFBundleIdentifier</key>
            <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>$(PRODUCT_NAME)</string>
            <key>CFBundlePackageType</key>
            <string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>LSRequiresIPhoneOS</key>
            <true/>
            <key>UILaunchStoryboardName</key>
            <string>LaunchScreen</string>
            <key>UIRequiredDeviceCapabilities</key>
            <array>
                <string>armv7</string>
            </array>
            <key>UISupportedInterfaceOrientations</key>
            <array>
                <string>UIInterfaceOrientationPortrait</string>
            </array>
            <key>NSPhotoLibraryUsageDescription</key>
            <string>FlirtFrame needs access to analyze your photos and generate conversation starters</string>
            <key>NSCameraUsageDescription</key>
            <string>FlirtFrame needs camera access to take photos for generating conversation starters</string>
        </dict>
        </plist>
        EOF
        
    - name: Create XcodeGen Project
      run: |
        cat > project.yml << 'EOF'
        name: FlirtFrame
        options:
          bundleIdPrefix: com.flirtframe
          deploymentTarget:
            iOS: 16.0
        settings:
          base:
            PRODUCT_BUNDLE_IDENTIFIER: com.flirtframe.app
            CODE_SIGN_IDENTITY: ""
            CODE_SIGNING_REQUIRED: "NO"
            CODE_SIGNING_ALLOWED: "NO"
            DEVELOPMENT_TEAM: ""
            SWIFT_VERSION: 5.0
            IPHONEOS_DEPLOYMENT_TARGET: 16.0
        targets:
          FlirtFrame:
            type: application
            platform: iOS
            sources:
              - FlirtFrameApp/Sources
              - FlirtFrameApp/Assets.xcassets
            settings:
              base:
                INFOPLIST_FILE: FlirtFrameApp/Info.plist
                PRODUCT_BUNDLE_IDENTIFIER: com.flirtframe.app
        EOF
        
        # Install XcodeGen
        brew install xcodegen || true
        
        # Generate project
        xcodegen generate
        
    - name: Build iOS App
      run: |
        # Build
        xcodebuild clean build \
          -project FlirtFrame.xcodeproj \
          -scheme FlirtFrame \
          -configuration Release \
          -sdk iphoneos \
          -destination "generic/platform=iOS" \
          -derivedDataPath DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO || exit 1
          
        # Find app
        APP_PATH=$(find DerivedData -name "FlirtFrame.app" -type d | head -1)
        
        # Create IPA
        mkdir -p Payload
        cp -R "$APP_PATH" Payload/
        zip -qr FlirtFrame-v1.ipa Payload
        
        # Verify
        ls -lh FlirtFrame-v1.ipa
        
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: FlirtFrame-Incremental-v1
        path: FlirtFrame-v1.ipa
        if-no-files-found: error